Mapping Java types to DataBase types by using JDBC "Bridge" Types
=================================================================

Jdbc Types: Permite hace un mapeo de los tipos de datos de java con los tipos de datos del motor de base de datos
para una optima manipulacion

Java            Jdbc DataType       Oracle
int             Types.INTEGER       number
String          Types.VARCHAR       varchar, varchar2
float           Types.FLOAT         number
java.sql.Date   Types.DATE          date


Process to call StoredProcedure from Java App
=============================================

1. El SP debe estar listo en la BD
2. Crear el objeto CallableStatement 
3. Proveer los valores para cada parametro IN
4. Registrar cada parametro OUT con JDBC Types
5. Execute procedure call
6. obtener los resultados.


CURSORES EN ORACLE
==================

Permite acceder a los objetos de una consulta almacenada en el context area de la BD

Tipo de Cursores
1. Cursor implicito: son cursores creados automaticamente por la BD. Cursor implicito en Oracle:
    1.1 SYS_REFCURSOR: Es utilizado para contener los resultado de un select query
    1.2 %ROWCOUNT: Es utilizado para contener los resultados de un non select query (insert/delete/update)
    1.3 %FOUND: Es utilizado para verificar alguna fila fue afectada por el query ejecutado. Se aplica para non query
2. Cursor explicito: son cursores creados por el programador para contener un resultado de una consulta particular

FUNCIONES EN ORACLE
===================

Las funciones son objetos en oracle que retornan un resultado explicitamente. A diferencia de los procedure los cuales
pueden o no retornar un valor explicito.

JDBC EXECUTE METHODS
====================

1. executeQuery(): Puede ser utilizado para ejecutar selected queries. Ejemplo
    ResultSet rs = stmt.executeQuery("select * from employee");

2. executeUpdate(): Lo utilizamos para la ejecucion de non selected queries y recibimos el numero de registros afectados.
    int updateCount = stmt.executeUpdate("insert/update/delete query");

3. execute(): Lo utilizamos cuando no sabemos que tipo de query se realizara (selected or non selected query). Por ejemplo 
    el usuario construye su propia consulta pudiendo ser un select o un insert, update, delete.
    boolean r = stmt.execute("select/non select query");
    La variable boolean r retornara true cuando se trata de un select query / false de lo contrario.
    if(r == true) ResultSet rs = stmt.getResultSet();
    else int updateCount = stmt.getUpdateCount();
4. executeBatch()